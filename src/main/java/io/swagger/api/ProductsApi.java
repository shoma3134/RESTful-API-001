/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Products;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-18T21:49:50.671Z[GMT]")
@Api(value = "products", description = "the products API")
public interface ProductsApi {

    @ApiOperation(value = "Add a new product to the store", nickname = "addProduct", notes = "", tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "created."),
        @ApiResponse(code = 400, message = "Bad request."),
        @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/products",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addProduct(@ApiParam(value = "Product object that needs to be added" ,required=true )  @Valid @RequestBody Products body);


    @ApiOperation(value = "Deletes a product", nickname = "deleteProduct", notes = "", tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource was deleted successfully."),
        @ApiResponse(code = 404, message = "Product not found."),
        @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/products/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProduct(@ApiParam(value = "Product id to delete",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Search Product", nickname = "searchProduct", notes = "Returns a single product", response = Products.class, responseContainer = "List", tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation.", response = Products.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request."),
        @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/products/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Products>> searchProduct(@ApiParam(value = "Title values that need to be considered for filter") @Valid @RequestParam(value = "id", required = false) Long id,@ApiParam(value = "Title values that need to be considered for filter") @Valid @RequestParam(value = "title", required = false) String title,@ApiParam(value = "Title values that need to be considered for filter") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "Title values that need to be considered for filter") @Valid @RequestParam(value = "price", required = false) Long price);


    @ApiOperation(value = "Update an existing product.", nickname = "updateProduct", notes = "", tags={ "products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Products not found."),
        @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/products/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateProduct(@ApiParam(value = "Product object that needs to be added" ,required=true )  @Valid @RequestBody Products body,@ApiParam(value = "ID of product to return",required=true) @PathVariable("id") Long id);

}
